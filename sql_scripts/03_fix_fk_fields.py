import psycopg2

# REF: https://stackoverflow.com/questions/20593946/postgresql-reconfigure-existing-table-changing-primary-key-to-type-serial
# https://dba.stackexchange.com/questions/78732/change-existing-column-in-pg-to-auto-incremental-primary-key

conn = psycopg2.connect(
    host="localhost",
    database="Chinook",
    user="postgres",
    password="YOUR_PASSWORD")

# We have a problem that the PK is an int, and not a auto increment.


# Execute in transaction
with conn:
    with conn.cursor() as cur:
        # Rename PK column name
        # cur.execute('ALTER TABLE public."Artist" RENAME COLUMN "ArtistId" TO id')

        ################################################################################################
		# Option 1: Change script that creates DB
        
		################################################################################################
		# Option 2: Change type to auto increment manually (is wat serial do behind scenes)

		# An integer with nextavl set and sequence is a "serial" field
		# Create sequence to get ID value from
        #cur.execute('CREATE SEQUENCE Artist_id_seq OWNED BY public."Artist"."ArtistId"')
		
        # set default sequence
        #cur.execute('ALTER TABLE public."Artist" ALTER COLUMN "ArtistId" SET DEFAULT nextval("Artist_id_seq"::regclass)')
		
        # Set value for sequence
        #cur.execute('WITH mx AS (SELECT max(public."Artist"."ArtistId") AS mx FROM public."Artist") SELECT setval("Artist_id_seq", mx.mx) FROM mx')
        # Could be done easier with this query?
        # SELECT setval('Artist_id_seq', COALESCE(max(ArtistId), 1)) FROM public."Artist";

        """
        When I execute this lines, I have this error:

        cur.execute('ALTER TABLE public."Artist" ALTER COLUMN "ArtistId" SET DEFAULT nextval("Artist_id_seq"::regclass)')
        psycopg2.errors.UndefinedColumn: column "Artist_id_seq" does not exist

		TODO: Try like this:
		nextval(public."Artist"."Artist_id_seq")
        """

		################################################################################################
		# Option 3: Change type to serial
        # ReF: https://www.postgresql.org/message-id/AANLkTimR3Ve294fRWkw8MMzP_ErJqhmu3ieoi6O%2BoW24%40mail.gmail.com

		# cur.execute('ALTER TABLE public."Artist" ALTER COLUMN "ArtistId" TYPE SERIAL')

        """
        # This gives this error: 
        psycopg2.errors.UndefinedObject: type "serial" does not exist
        """

		################################################################################################
		# Option 4: Postgres 10 or up : use identity instead of serial

        # Ref: https://stackoverflow.com/questions/31965506/postgresql-column-type-conversion-from-bigint-to-bigserial
        # Ref: https://stackoverflow.com/questions/55555547/how-can-i-change-existing-column-as-identity-in-postgresql-11-1

        #cur.execute('SELECT max(public."Artist"."ArtistId")+1 FROM public."Artist"')
        #var = cur.fetchone()[0]
        #cur.execute(f'ALTER TABLE public."Artist" ALTER COLUMN "ArtistId" ADD GENERATED BY DEFAULT AS IDENTITY') 
        # cur.execute(f'ALTER TABLE public."Artist" ALTER COLUMN "ArtistId" RESTART WITH {var}')
        # This one does not work, variable in RESTART gives an error
        # cur.execute(f'ALTER TABLE public."Artist" ALTER COLUMN "ArtistId" RESTART WITH (SELECT max(public."Artist"."ArtistId")+1 FROM public."Artist")')
        """
        Before this, column definition was:
        
        "ArtistId" integer NOT NULL,

        After this, 

        "ArtistId" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        """
        


with conn:
    with conn.cursor() as cur:
        tables = ["Album", "Artist", "Customer", "Employee", "Genre", "Invoice", "InvoiceLine", "MediaTType", "Playlist", "Track"]

        for table in tables:
            tableid = f"{table}Id"
            cur.execute(f'SELECT max(public."{table}"."{tableid}")+1 FROM public."{table}"')
            max_id = cur.fetchone()[0]
            cur.execute(f'ALTER TABLE public."{table}" ALTER COLUMN "{tableid}" ADD GENERATED BY DEFAULT AS IDENTITY') 
            query = f'ALTER TABLE public."{table}" ALTER COLUMN "{tableid}" RESTART WITH {max_id}'
            cur.execute(query)

        table = "PlaylistTrack"
        tableid = "id"
        cur.execute(f'SELECT max(public."{table}"."{tableid}")+1 FROM public."{table}"')
        max_id = cur.fetchone()[0]
        cur.execute(f'ALTER TABLE public."{table}" ALTER COLUMN "{tableid}" ADD GENERATED BY DEFAULT AS IDENTITY') 
        cur.execute(f'ALTER TABLE public."{table}" ALTER COLUMN "{tableid}" RESTART WITH {max_id}')
